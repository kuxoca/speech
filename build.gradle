plugins {
    id 'java'
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "org.springframework.boot" version "3.0.1" apply false
    id "com.google.cloud.tools.jib" version "3.2.1" apply false
    id "fr.brouillard.oss.gradle.jgitver" version "0.10.0-rc03" apply false

    id "com.google.protobuf" version "0.8.16" apply true
    id 'idea' apply true
}

group 'ppzeff'

dependencies {

//    implementation "io.grpc:grpc-netty"
    implementation "io.grpc:grpc-netty-shaded:${Versions.grpc}"
    implementation "io.grpc:grpc-protobuf"
    implementation "io.grpc:grpc-stub"
    implementation "com.google.protobuf:protobuf-java"
    implementation "com.google.errorprone:error_prone_annotations:${Versions.errorProneAnnotations}"

    implementation "org.apache.tomcat:annotations-api:${Versions.tomcatAnnotationsApi}"
    implementation "ch.qos.logback:logback-classic"

    implementation "com.fasterxml.jackson.core:jackson-databind"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}


compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile).configureEach {
    options.with {
        encoding = 'UTF-8'
    }
}


/*
def filesBaseDir = "${project.projectDir}/src/"
def protoSrcDir = "${project.projectDir}/src/main/proto"
def grpcSrcDir = "${project.projectDir}/src/main/grpc"
*/

def filesBaseDir = "$projectDir/build/generated"
def protoSrcDir = "$projectDir/build/generated/proto"
def grpcSrcDir = "$projectDir/build/generated/grpc"

sourceSets {
    main {
        proto {
            srcDir protoSrcDir
        }
        java {
            srcDir grpcSrcDir
        }
    }
}

idea {
    module {
        sourceDirs += file(protoSrcDir);
        sourceDirs += file(grpcSrcDir);
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.12.1'
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.30.2'

        }
    }

    generatedFilesBaseDir = filesBaseDir
    generateProtoTasks {
        ofSourceSet('main')*.plugins { grpc {} }
    }
}

//shadowJar {
//    archiveBaseName.set('bot_voice_msg')
//    archiveVersion.set('0.1')
//    archiveClassifier.set('')
//    manifest {
//        attributes 'Main-Class': 'ppzeff.Main2'
//    }
//}

allprojects {
    group "ppzeff"

    repositories {
        mavenLocal()
        mavenCentral()
    }

    apply plugin: "io.spring.dependency-management"
    dependencyManagement {
        dependencies {
            imports {
                mavenBom "org.springframework.boot:spring-boot-dependencies:3.0.1"
                mavenBom "org.testcontainers:testcontainers-bom:1.17.3"
                mavenBom "com.google.protobuf:protobuf-bom:3.21.1"
            }
            dependency "com.rabbitmq:amqp-client:${Versions.amqp}"
            dependency "com.google.guava:guava:${Versions.guava}"
            dependency "org.openjdk.jmh:jmh-core:${Versions.jmh}"
            dependency "org.openjdk.jmh:jmh-generator-annprocess:${Versions.jmh}"
            dependency "org.ow2.asm:asm-commons:${Versions.asm}"
            dependency("org.glassfish:jakarta.json:${Versions.glassfishJson}")

            dependency("org.projectlombok:lombok:${Versions.lombok}")
            dependency("com.google.code.gson:gson:${Versions.gson}")
            dependency("com.datastax.oss:java-driver-core:${Versions.cassandra}")

            dependency("org.mongodb:mongodb-driver-core:${Versions.mongodb}")
            dependency("org.mongodb:mongodb-driver-sync:${Versions.mongodb}")
            dependency("org.mongodb:bson:${Versions.mongodb}")
            dependency("org.mongodb:mongodb-driver-reactivestreams:${Versions.mongodbReactive}")
            dependency("org.neo4j.driver:neo4j-java-driver:${Versions.neo4j}")
            dependency("redis.clients:jedis:${Versions.jedis}")

            dependency("org.webjars:sockjs-client:${Versions.sockjs}")
            dependency("org.webjars:stomp-websocket:${Versions.stomp}")
            dependency("org.webjars:bootstrap:${Versions.bootstrap}")
            dependency("org.springdoc:springdoc-openapi-starter-webmvc-ui:${Versions.springDocOpenapiUi}")
            dependency("com.google.code.findbugs:jsr305:${Versions.jsr305}")

            dependency("io.grpc:grpc-netty:${Versions.grpc}")
            dependency("io.grpc:grpc-protobuf:${Versions.grpc}")
            dependency("io.grpc:grpc-stub:${Versions.grpc}")
            dependency("com.github.tomakehurst:wiremock:${Versions.wiremock}")
            dependency("io.r2dbc:r2dbc-postgresql:${Versions.r2dbcPostgresql}")
        }
    }


    configurations.configureEach {
        resolutionStrategy {
            failOnVersionConflict()

            force("javax.servlet:servlet-api:2.4")
            force("commons-logging:commons-logging:1.1.1")
            force("commons-lang:commons-lang:2.5")
            force("org.codehaus.jackson:jackson-core-asl:1.8.8")
            force("org.codehaus.jackson:jackson-mapper-asl:1.8.3")
            force("org.codehaus.jettison:jettison:1.1")
            force("net.java.dev.jna:jna:5.8.0")
            force("com.google.errorprone:error_prone_annotations:2.7.1")
            force("org.ow2.asm:asm:9.4")
        }
    }
}

//tasks.build.dependsOn tasks.shadowJar